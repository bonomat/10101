name: "[DEV] Build and Publish iOS"
on: workflow_dispatch

jobs:
  # Build job
  build:
    runs-on: macos-latest
    steps:

      - uses: actions/checkout@v3
      - uses: extractions/setup-just@v1

      # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
      - name: Checkout repository
        uses: actions/checkout@v2

      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          

      - name: Show codesigning ids
        run: security find-identity -v -p codesigning

#      # Install flutter
#      - name: Flutter get
#        uses: subosito/flutter-action@v1
#        with:
#          flutter-version: '2.10.1'
#
#      # Install your project's dependencies
#      - run: flutter pub get

      - name: Setup rust toolchain
        run: rustup show

      - uses: Swatinem/rust-cache@v2.2.0

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Install FFI bindings
        uses: baptiste0928/cargo-install@v1
        with:
          crate: flutter_rust_bridge_codegen
          version: "1.63.1"

      - name: Generate FFI bindings
        run: just gen

      - name: Build deps
        run: just deps-ios

      - name: Build ios files
        run: just ios

      # Build and sign the ipa using a single flutter command
      - name: Building IPA
        working-directory: mobile/ios
        run: flutter build ipa --release --export-options-plist=$(pwd)/exportOptions.plist

      # Upload ipa file to Testflight
      - name: Publish to testflight
        working-directory: mobile/ios
        run: MATCH_PASSWORD=$MATCH_PASSWORD FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=$APP_SPECIFIC_PASSWORD MATCH_GIT_BASIC_AUTHORIZATION=$GIT_BASIC_AUTHORIZATION fastlane beta --verbose


#      # Collect the file and upload as artifact
#      - name: collect ipa artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          name: release-ipa
#          # Path to the release files
#          path: build/ios/ipa/*.ipa

      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
